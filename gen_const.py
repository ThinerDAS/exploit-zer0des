#!/usr/bin/python -i


ROUNDS = 8

IP = [58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16,
      8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7]

IP_1 = [40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61,
        29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25]

E = [32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16,
     17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1]

SBOX = [[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7], [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8], [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0], [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]], [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10], [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5], [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15], [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]], [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8], [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1], [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7], [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]], [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15], [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9], [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4], [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]], [
    [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9], [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6], [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14], [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]], [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11], [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8], [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6], [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]], [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1], [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6], [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2], [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]], [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7], [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2], [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8], [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]]

P = [16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31,
     10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25]

PC_1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44,
        36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4]

PC_2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2,
        41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]

R = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]


def inv_perm(l):
    assert sorted(l) == range(len(l))
    l2 = [0]*len(l)
    for i in range(len(l)):
        l2[l[i]] = i
    return l2


def gen_subkey():
    kbits = [i*8+7-j for i in range(8) for j in range(8)]
    kbits = [kbits[x-1] for x in PC_1]
    left = kbits[:28]
    right = kbits[28:]
    subkeys = []
    for i in range(ROUNDS):
        left = left[R[i]:]+left[:R[i]]
        right = right[R[i]:]+right[:R[i]]
        cur = left+right
        subkeys.append([cur[x-1] for x in PC_2])
    if subkeys[0] == subkeys[1] or subkeys[0] == subkeys[2]:
        raise Exception("Boom")
    return subkeys


def dim_correct(dim, content):
    if len(dim) == 0:
        assert not isinstance(content, (tuple, list))
    else:
        assert len(content) == dim[0]
        for i in content:
            dim_correct(dim[1:], i)


def print_raw_array(content, suf='', indent=0):
    suffix = ';' if indent == 0 else ','
    if isinstance(content[0], (list, tuple)):
        print(' '*indent+'{')
        for i in content:
            print_raw_array(i, suf, indent+4)
        print(' '*indent+'}'+suffix)
    else:
        print(' '*indent+'{'+','.join('{:d}'.format(i)+suf
                                      for i in content)+'}'+suffix)


def print_array(name, dim, content, type='uint8_t', lit_suffix=''):
    dim_correct(dim, content)
    print('static constexpr '+type+' '+name +
          ''.join('[{:2d}]'.format(i) for i in dim))+' = '
    print_raw_array(content, suf=lit_suffix)


def bswapi(x):
    return (x//8)*8+7-(x % 8)


def brev(x):
    return int('{:04b}'.format(x)[::-1], 2)


def brevl(l):
    l2 = [0]*16
    for h, i in enumerate(l):
        l2[brev(h)] = brev(i)
    return l2


ip = [bswapi(i-1) for i in IP]
print_array('IP', (64,), ip)
print_array('IP_I', (64,), inv_perm(ip))

sbox2 = [[brevl(j)for j in i]for i in SBOX]
print_array('SBOX', (8, 4, 16), sbox2)

p = [i-1 for i in P]
print_array('P', (32,), p)
print_array('P_I', (32,), inv_perm(p))

key_perm = gen_subkey()
print_array('KEY_PERM', (8, 48), key_perm)


def flatten(v):
    l = []
    for i in range(64):
        row = ((i & 1) << 1) | ((i >> 5) & 1)
        col = (i >> 1) & 0xf
        l.append(v[row][col])
    return l


def compact(bit_l):
    return sum(j << i for i, j in enumerate(bit_l))


def make_cross_avail(v):
    l = flatten(v)
    mp = [[0]*16 for i in range(64)]
    for i in range(64):
        for j in range(64):
            d = l[i] ^ l[j]
            mp[i ^ j][d] = 1
    return map(compact, mp)


def make_cross_avail_detail(v):
    l = flatten(v)
    mp = [[[0]*64 for j in range(16)] for i in range(64)]
    for i in range(64):
        for j in range(64):
            d = l[i] ^ l[j]
            mp[i ^ j][d][i] = 1
    return [map(compact, i)for i in mp]


flat_sbox = map(flatten, sbox2)

cross_av = map(make_cross_avail, sbox2)

print_array('CROSS_AV', (8, 64), cross_av, 'uint16_t')
cross_avd = map(make_cross_avail_detail, sbox2)

print_array('CROSS_AV_DET', (8, 64, 16), cross_avd, 'uint64_t', 'UL')

l = [key_perm[7].index(i) if i in key_perm[7] else 48 for i in key_perm[6]]

print_array('SUBKEY_I67', (48,), l)
